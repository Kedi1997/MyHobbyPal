@page "/personlist"
@inject HttpClient Http
@inject IMyHobbyPalClient MyHobbyPalClient
@using MyHobbyPal.Client

<h3>Person list</h3>

<h4>Search Person:</h4>
<EditForm Model="@Input" OnSubmit="Search">
    <div class="form-group row">
        <label for="givenName" class="col-sm-3">Given Name:</label>
        <InputText id="givenName" class="form-control col-sm-8" @bind-Value="Input.GivenName" placeholder="Enter Given Name"></InputText>
    </div>
    <div class="form-group row">
        <label for="familyName" class="col-sm-3">Family Name:</label>
        <InputText id="familyName" class="form-control col-sm-8" @bind-Value="Input.FamilyName" placeholder="Enter Family Name"></InputText>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h4>Paging:</h4>
<EditForm Model="@Input" OnSubmit="OnInitializedAsync">

    <button type="submit" class="btn btn-primary">Go</button>
    <InputNumber id="count" @bind-Value="Count"></InputNumber>
    <button @onclick="Previous" disabled="@PreviousDisabled"> ← </button>
    <button @onclick="Next" disabled="@NextDisabled"> → </button>

</EditForm>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>PersonId</th>
            <th>PartitionKey</th>
            <th>GivenName</th>
            <th>FamilyName</th>
            <th>PhoneNumbers</th>
        </tr>
    </thead>
    <tbody>
        @if (Persons.Count > 0)
        {
            @foreach (var person in Persons)
            {
                <tr>
                    <td>
                        <a href="@($"persondetail/{person.PersonId}/{person.PartitionKey}")" class="btn btn-primary">Detail</a>
                        <i class="fas fa-info=circle"></i>
                    </td>
                    <td>@person.PersonId</td>
                    <td>@person.PartitionKey</td>
                    <td>@person.GivenName</td>
                    <td>@person.FamilyName</td>
                    @foreach (var n in person.PhoneNumbers)
                    {
                        <td>@n.ToString()</td>
                    }

                </tr>
            }
        }
        else
        {
            <h5>Loading...</h5>
        }

    </tbody>
</table>



@code {
    protected SearchInput Input { get; set; } = new SearchInput();

    private IList<IPersonDetail> Persons = new List<IPersonDetail>();

    protected int Count { get; set; } = 5;
    protected bool PreviousDisabled = true;
    protected bool NextDisabled = false;

    protected PageInfo PageInfo;

    protected override async Task OnInitializedAsync()
    {
        var result = await MyHobbyPalClient.GetAllPersonsAsync(first:Count);
        result.EnsureNoErrors();

        Persons = result.Data!.Persons.Nodes.ToList<IPersonDetail>();
        PageInfo = (PageInfo)result.Data!.Persons.PageInfo;

        NextDisabled = !PageInfo.HasNextPage;

        StateHasChanged();
    }

    protected async Task Search()
    {
        if (string.IsNullOrEmpty(Input.FamilyName) && string.IsNullOrEmpty(Input.GivenName))
        {
            await OnInitializedAsync();
        }
        else
        {
            var result = await MyHobbyPalClient.GetPersonByNameAsync(Input.GivenName, Input.FamilyName);
            result.EnsureNoErrors();

            Persons = result.Data!.PersonByName.ToList<IPersonDetail>();
            StateHasChanged();
        }

    }

    public async Task Previous()
    {
        var result = await MyHobbyPalClient.GetAllPersonsAsync(last: Count, before: PageInfo.StartCursor);
        result.EnsureNoErrors();

        Persons = result.Data!.Persons.Nodes.ToList<IPersonDetail>();
        PageInfo = (PageInfo)result.Data!.Persons.PageInfo;

        PreviousDisabled = !PageInfo.HasPreviousPage;
        NextDisabled = !PageInfo.HasNextPage;
        StateHasChanged();
    }

    public async Task Next()
    {
        var result = await MyHobbyPalClient.GetAllPersonsAsync(first: Count, after: PageInfo.EndCursor);
        result.EnsureNoErrors();

        Persons = result.Data!.Persons.Nodes.ToList<IPersonDetail>();
        PageInfo = (PageInfo)result.Data!.Persons.PageInfo;

        NextDisabled = !PageInfo.HasNextPage;
        PreviousDisabled = !PageInfo.HasPreviousPage;
        StateHasChanged();

    }

    public class SearchInput
    {
        public string GivenName { get; set; } = string.Empty;
        public string FamilyName { get; set; } = string.Empty;
    }

}
