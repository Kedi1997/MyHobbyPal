@page "/edithobby/{personId}/{partitionKey}/{hobbyId}/{personHobbyId}/{hobbyName}/{difficulty:double}/{yearsPracticed:int}/{expertiseAchieved:double}"
@page "/addhobby/{personId}/{partitionKey}"

<h3>EditHobby</h3>

@if (!Saved)
{

    <EditForm Model="@Input" OnSubmit="Submit">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <label for="name" class="col-sm-3">Hobby Name:</label>
            <InputText id="name" class="form-control col-sm-8" @bind-Value="Input.Name" placeholder="Enter Hobby Name"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(()=>Input.Name)" />
        </div>
        <div class="form-group row">
            <label for="difficulity" class="col-sm-3">Difficulity:</label>
            <InputNumber id="difficulity" class="form-control col-sm-8" @bind-Value="Input.Difficulty" placeholder="Enter Difficulity"></InputNumber>
        </div>
        <div class="form-group row">
            <label for="yearsPracticed" class="col-sm-3">Years Practiced:</label>
            <InputNumber id="yearsPracticed" class="form-control col-sm-8" @bind-Value="Input.YearsPracticed" placeholder="Enter Years Practiced"></InputNumber>
        </div>
        <div class="form-group row">
            <label for="expertiseAchieved" class="col-sm-3">Expertise Achieved:</label>
            <InputNumber id="expertiseAchieved" class="form-control col-sm-8" @bind-Value="Input.ExpertiseAchieved" placeholder="Enter Expertise Achieved"></InputNumber>
        </div>

        <button type="submit">Submit</button>
    </EditForm>

}
else
{
    <h5>@Message</h5>

    <a href="@($"persondetail/{PersonId}/{PartitionKey}")" class="btn btn-primary">Go to Detail</a>
}

@code {

    #region Member Variables
    public HobbyInput Input { get; set; } = new HobbyInput();

    [Parameter]
    public string PersonId { get; set; }

    [Parameter]
    public string PartitionKey { get; set; }

    [Parameter]
    public string HobbyId { get; set; }

    [Parameter]
    public string PersonHobbyId { get; set; }
    [Parameter]
    public string HobbyName { get; set; }
    [Parameter]
    public double Difficulty { get; set; }
    [Parameter]
    public int YearsPracticed { get; set; }
    [Parameter]
    public double ExpertiseAchieved { get; set; }

    protected bool Saved;
    protected string Message;
    #endregion

    #region OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        Saved = false;
        Input.Name = HobbyName;
        Input.Difficulty = Difficulty;
        Input.YearsPracticed = YearsPracticed;
        Input.ExpertiseAchieved = ExpertiseAchieved;

        await base.OnInitializedAsync();
    }
    #endregion

    #region Submit
    protected async Task Submit()
    {

        var upsertHobbyForPersonInput = new UpsertHobbyForPersonInput
        {
            PersonId = PersonId,
            PartitionKey = PartitionKey,
            HobbyName = Input.Name,
            Difficulty = Input.Difficulty,
            YearsPracticed = Input.YearsPracticed,
            ExpertiseAchieved = Input.ExpertiseAchieved,
            PersonHobbyId = PersonHobbyId,
            HobbyId = HobbyId
        };

        await MyHobbyPalClient.UpsertHobbyForPersonAsync(upsertHobbyForPersonInput);
        Saved = true;
        Message = "Successfully added!";
    }
    #endregion

    #region HobbyInput
    public class HobbyInput
    {
        [Required]
        public string Name { get; set; }
        public double Difficulty { get; set; }
        public int YearsPracticed { get; set; }
        public double ExpertiseAchieved { get; set; }
    }
    #endregion

}