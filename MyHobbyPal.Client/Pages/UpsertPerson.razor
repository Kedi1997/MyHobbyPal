@page "/addperson"
@page "/editperson/{personId}/{partitionKey}"
@inject IMyHobbyPalClient MyHobbyPalClient
@using System.ComponentModel.DataAnnotations;

<h3>AddPerson</h3>

@if (!Saved)
{

    <EditForm Model="@Input" OnSubmit="Submit">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <label for="givenName" class="col-sm-3">Given Name:</label>
            <InputText id="givenName" class="form-control col-sm-8" @bind-Value="Input.GivenName" placeholder="Enter Given Name"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(()=>Input.GivenName)" />
        </div>
        <div class="form-group row">
            <label for="familyName" class="col-sm-3">Family Name:</label>
            <InputText id="familyName" class="form-control col-sm-8" @bind-Value="Input.FamilyName" placeholder="Enter Family Name"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(()=>Input.FamilyName)" />
        </div>
        <div class="form-group row">
            <label for="phoneNumbers" class="col-sm-3">Phone Numbers:</label>
            <InputText id="phoneNumbers" class="form-control col-sm-8" @bind-Value="Input.PhoneNumbers" placeholder="Enter Phone Numbers, split by ,"></InputText>
        </div>

        <button type="submit">Submit</button>
    </EditForm>

}
else
{
    <h5>@Message</h5>

    <a href="@($"persondetail/{PersonId}/{PartitionKey}")" class="btn btn-primary">Go to Detail</a>
}

@code {

    public PersonInput Input { get; set; } = new PersonInput();

    [Parameter]
    public string PersonId { get; set; }

    [Parameter]
    public string PartitionKey { get; set; }

    protected bool Saved;
    protected string Message;

    protected override async Task OnInitializedAsync()
    {
        Saved = false;
        if(!string.IsNullOrEmpty(PersonId)&& !string.IsNullOrEmpty(PartitionKey))
        {
            var result = await MyHobbyPalClient.GetPersonHobbiesAsync(PersonId, PartitionKey);
            var person = result.Data!.PersonHobbies.Person;
            if (person != null)
            {
                Input.FamilyName = person.FamilyName;
                Input.GivenName = person.GivenName;
                Input.PhoneNumbers = string.Join(",", person.PhoneNumbers);
            }
        }
    }

    protected async Task Submit()
    {
        PersonId = string.IsNullOrEmpty(PersonId) ? Guid.NewGuid().ToString("D") : PersonId;
        PartitionKey = string.IsNullOrEmpty(PartitionKey) ? Guid.NewGuid().ToString("D") : PartitionKey;

        var upsertPersonInput = new UpsertPersonInput
        {
            PersonId = PersonId,
            PartitionKey =PartitionKey,
            FamilyName = Input.FamilyName,
            GivenName = Input.GivenName,
            PhoneNumbers = Input.PhoneNumbers.Split(",")
        };

        await MyHobbyPalClient.UpsertPersonAsync(upsertPersonInput);
        Saved = true;
        Message = "Successfully added!";
    }

    public class PersonInput
    {
        [Required]
        public string GivenName { get; set; } = string.Empty;
        [Required]
        public string FamilyName { get; set; } = string.Empty;
        public string PhoneNumbers { get; set; } = string.Empty;
    }

}
