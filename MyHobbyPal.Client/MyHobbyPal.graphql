schema {
  query: Query
  mutation: Mutation
}

type Query {
  persons(first: Int after: String last: Int before: String): PersonTypeConnection
  person(personId: String partitionKey: String givenName: String familyName: String): [PersonType!]!
}

type Mutation {
  upsertPerson(input: UpsertPersonInput!): PersonPayload!
  upsertHobbyForPerson(input: UpsertHobbyForPersonInput!): UpsertHobbyForPersonPayload!
}

type PersonType {
  personId: String
  partitionKey: String
  givenName: String
  familyName: String
  phoneNumbers: [String!]
  hobbies: [HobbyType!]
}

"A connection to a list of items."
type PersonTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PersonTypeEdge!]
  "A flattened list of the nodes."
  nodes: [PersonType!]
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type PersonTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PersonType!
}

type UpsertHobbyForPersonPayload {
  hobbyType: HobbyType!
}

type PersonPayload {
  personType: PersonType!
}

input UpsertPersonInput {
  personId: String
  partitionKey: String
  givenName: String
  familyName: String
  phoneNumbers: [String!]
}

input UpsertHobbyForPersonInput {
  personId: String!
  partitionKey: String!
  hobbyName: String!
  difficulty: Float
  yearsPracticed: Int
  expertiseAchieved: Float
  hobbyId: String
  personHobbyId: String
}

type HobbyType {
  hobby: Hobby
  yearsPracticed: Int
  expertiseAchieved: Float
  personHobbyId: String
}

type Hobby {
  hobbyId: String
  partitionKey: String
  name: String
  difficulty: Float
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD